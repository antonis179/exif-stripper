package org.amoustakos.exifstripper.utils.exif

import androidx.exifinterface.media.ExifInterface
import timber.log.Timber
import java.lang.reflect.Modifier

object Attributes {

	operator fun invoke(): Set<String> = attributes

	private val attributes: MutableSet<String> = HashSet()

	init {
		attributes.add("FNumber")
		attributes.add("ApertureValue")
		attributes.add("Artist")
		attributes.add("BitsPerSample")
		attributes.add("BrightnessValue")
		attributes.add("CFAPattern")
		attributes.add("ColorSpace")
		attributes.add("ComponentsConfiguration")
		attributes.add("CompressedBitsPerPixel")
		attributes.add("Compression")
		attributes.add("Contrast")
		attributes.add("Copyright")
		attributes.add("CustomRendered")
		attributes.add("DateTime")
		attributes.add("DateTimeDigitized")
		attributes.add("DateTimeOriginal")
		attributes.add("DefaultCropSize")
		attributes.add("DeviceSettingDescription")
		attributes.add("DigitalZoomRatio")
		attributes.add("DNGVersion")
		attributes.add("ExifVersion")
		attributes.add("ExposureBiasValue")
		attributes.add("ExposureIndex")
		attributes.add("ExposureMode")
		attributes.add("ExposureProgram")
		attributes.add("ExposureTime")
		attributes.add("FileSource")
		attributes.add("Flash")
		attributes.add("FlashpixVersion")
		attributes.add("FlashEnergy")
		attributes.add("FocalLength")
		attributes.add("FocalLengthIn35mmFilm")
		attributes.add("FocalPlaneResolutionUnit")
		attributes.add("FocalPlaneXResolution")
		attributes.add("FocalPlaneYResolution")
		attributes.add("GainControl")
		attributes.add("GPSAltitude")
		attributes.add("GPSAltitudeRef")
		attributes.add("GPSAreaInformation")
		attributes.add("GPSDateStamp")
		attributes.add("GPSDestBearing")
		attributes.add("GPSDestBearingRef")
		attributes.add("GPSDestDistance")
		attributes.add("GPSDestDistanceRef")
		attributes.add("GPSDestLatitude")
		attributes.add("GPSDestLatitudeRef")
		attributes.add("GPSDestLongitude")
		attributes.add("GPSDestLongitudeRef")
		attributes.add("GPSDifferential")
		attributes.add("GPSDOP")
		attributes.add("GPSImgDirection")
		attributes.add("GPSImgDirectionRef")
		attributes.add("GPSLatitude")
		attributes.add("GPSLatitudeRef")
		attributes.add("GPSLongitude")
		attributes.add("GPSLongitudeRef")
		attributes.add("GPSMapDatum")
		attributes.add("GPSMeasureMode")
		attributes.add("GPSProcessingMethod")
		attributes.add("GPSSatellites")
		attributes.add("GPSSpeed")
		attributes.add("GPSSpeedRef")
		attributes.add("GPSStatus")
		attributes.add("GPSTimeStamp")
		attributes.add("GPSTrack")
		attributes.add("GPSTrackRef")
		attributes.add("GPSVersionID")
		attributes.add("ImageDescription")
		attributes.add("ImageLength")
		attributes.add("ImageUniqueID")
		attributes.add("ImageWidth")
		attributes.add("InteroperabilityIndex")
		attributes.add("ISOSpeedRatings")
		attributes.add("JPEGInterchangeFormat")
		attributes.add("JPEGInterchangeFormatLength")
		attributes.add("LightSource")
		attributes.add("Make")
		attributes.add("MakerNote")
		attributes.add("MaxApertureValue")
		attributes.add("MeteringMode")
		attributes.add("Model")
		attributes.add("NewSubfileType")
		attributes.add("OECF")
		attributes.add("AspectFrame")
		attributes.add("PreviewImageLength")
		attributes.add("PreviewImageStart")
		attributes.add("ThumbnailImage")
		attributes.add("Orientation")
		attributes.add("PhotometricInterpretation")
		attributes.add("PixelXDimension")
		attributes.add("PixelYDimension")
		attributes.add("PlanarConfiguration")
		attributes.add("PrimaryChromaticities")
		attributes.add("ReferenceBlackWhite")
		attributes.add("RelatedSoundFile")
		attributes.add("ResolutionUnit")
		attributes.add("RowsPerStrip")
		attributes.add("ISO")
		attributes.add("JpgFromRaw")
		attributes.add("SensorBottomBorder")
		attributes.add("SensorLeftBorder")
		attributes.add("SensorRightBorder")
		attributes.add("SensorTopBorder")
		attributes.add("SamplesPerPixel")
		attributes.add("Saturation")
		attributes.add("SceneCaptureType")
		attributes.add("SceneType")
		attributes.add("SensingMethod")
		attributes.add("Sharpness")
		attributes.add("ShutterSpeedValue")
		attributes.add("Software")
		attributes.add("SpatialFrequencyResponse")
		attributes.add("SpectralSensitivity")
		attributes.add("StripByteCounts")
		attributes.add("StripOffsets")
		attributes.add("SubfileType")
		attributes.add("SubjectArea")
		attributes.add("SubjectDistance")
		attributes.add("SubjectDistanceRange")
		attributes.add("SubjectLocation")
		attributes.add("SubSecTime")
		attributes.add("SubSecTimeDigitized")
		attributes.add("SubSecTimeOriginal")
		attributes.add("ThumbnailImageLength")
		attributes.add("ThumbnailImageWidth")
		attributes.add("TransferFunction")
		attributes.add("UserComment")
		attributes.add("WhiteBalance")
		attributes.add("WhitePoint")
		attributes.add("XResolution")
		attributes.add("YCbCrCoefficients")
		attributes.add("YCbCrPositioning")
		attributes.add("YCbCrSubSampling")
		attributes.add("YResolution")

		// Get all fields that the concrete Android-Java implementation have and delete them
		val fields = ExifInterface::class.java.declaredFields
		for (field in fields) {
			if (Modifier.isPublic(field.modifiers) &&
					Modifier.isStatic(field.modifiers) &&
					Modifier.isFinal(field.modifiers)) {

				if (field.type == String::class.java) try {
					attributes.add(field.get(String::class.java) as String)
					Timber.e(field.get(String::class.java) as String)
				} catch (e: IllegalAccessException) {
					Timber.e(e)
				}

			}
		}
	}

}